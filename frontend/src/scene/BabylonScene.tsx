import React, { useEffect, useRef, useState, useCallback, useMemo } from 'react';
import {
  Engine, Scene, ArcRotateCamera, HemisphericLight, Vector3, MeshBuilder,
  StandardMaterial, Color3, PointLight, Tools, VertexData, Matrix, Texture, Mesh
} from '@babylonjs/core';
import type { WASMModule } from '../wasm/init';
import { createPositionsView, extractCelestialPositions } from '../wasm/init';

// ‚úÖ CORRECT - Interface for 3D scene management (Babylon.js 8.21.0)
interface BabylonSceneProps {
  readonly canvas: HTMLCanvasElement | null;
  readonly wasmModule: WASMModule | null; // ‚úÖ Direct WASM access for 60fps updates
  readonly isInitialized: boolean;
  readonly onFpsUpdate?: (fps: number) => void; // ‚úÖ FPS callback for 60fps updates
  readonly onTimeUpdate?: (timeData: TimeDisplayData) => void; // ‚úÖ Time display callback
}

// ‚úÖ CORRECT - Celestial body configuration for artistic proportions
type CelestialBodyConfig = {
  readonly name: string;
  readonly radius: number;          // Artistic size, not realistic
  readonly color: Color3;
  readonly emission: number;        // Self-illumination level
  readonly hasRings?: boolean;
};

// ‚úÖ CORRECT - Pre-configured celestial bodies with MUCH LARGER sizes for visibility
const CELESTIAL_BODIES: Record<string, CelestialBodyConfig> = {
  sun: {
    name: 'Sun',
    radius: 5.0,                   // MUCH LARGER for visibility
    color: new Color3(1.0, 0.8, 0.3),
    emission: 1.0                  // Full emission for light source
  },
  earth: {
    name: 'Earth',
    radius: 3.0,                   // MUCH LARGER for visibility
    color: new Color3(0.2, 0.6, 1.0),
    emission: 0.0
  },
  moon: {
    name: 'Moon',
    radius: 1.5,                   // MUCH LARGER for visibility
    color: new Color3(0.8, 0.8, 0.7),
    emission: 0.0
  }
} as const;

// ‚úÖ CONSTANTS for astronomical calculations
const JULIAN_DAY_UNIX_EPOCH = 2440587.5;

// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö 1: STAR DATA –ú–ê–°–°–ò–í –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Å—Ü–µ–Ω—ã (—Å—Ç—Ä–æ–∫–∏ 710-739)
// –¢–æ—á–Ω—ã–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥ –¥–ª—è —Å–æ–∑–≤–µ–∑–¥–∏–π
const STAR_DATA = {
  rightAscension: [
    [[2,31,48.7],[17,32,12.9],[16,45,58.1],[15,44,3.5],[16,17,30.3],[15,20,43.7],[14,50,42.3]],
    [[6,3,55.2],[6,11,56.4],[6,7,34.3],[5,54,22.9],[6,2,23.0],[5,55,10.3],[5,35,8.3],[5,25,7.9],[5,32,0.4],[5,14,32.3],[5,47,45.4],[5,40,45.5],[4,54,53.8],[4,50,36.7],[4,49,50.4],[4,51,12.4],[4,54,15.1],[4,58,32.9],[5,36,12.8],[5,35,26.0],[5,35,24.0],[5,35,23.2],[5,35,12.0]],
    [[6,45,8.92]],
    [[7,39,18.1]],
    [[7,45,18.9]],
    [[5,16,41.4]],
    [[4,35,55.2]]
  ],
  declination: [
    [[89,15,51.0],[86,35,11.0],[82,2,14.0],[77,47,40.0],[75,45,19.0],[71,50,2.0],[74,9,20.0]],
    [[20,8,18.0],[14,12,32.0],[14,46,6.0],[20,16,34.0],[9,38,51.0],[7,24,25.0],[9,56,3.0],[6,20,59.0],[-0,17,57.0],[-8,12,6.0],[-9,40,11.0],[-1,56,34.0],[10,9,3.0],[8,54,1.0],[6,57,41.0],[5,36,18.0],[2,26,26.0],[1,42,51.0],[-1,12,7.0],[-5,54,36.0],[-5,27,0.0],[-4,50,18.0],[-4,24,0.0]],
    [[-16,42,58.02]],
    [[5,13,30.0]],
    [[28,1,34.0]],
    [[45,59,53.0]],
    [[16,30,33.0]]
  ],
  apparentMagnitude: [
    [2.02,4.36,4.23,4.32,4.95,3.05,2.08],
    [4.63,4.48,4.42,4.41,4.12,0.5,3.54,1.64,2.23,0.12,2.06,2.05,4.65,4.36,3.19,3.69,3.72,4.47,1.7,2.77,2.9,4.59,4.6],
    [-3.46],
    [0.38],
    [1.14],
    [0.08],
    [0.85]
  ],
  color: [
    [[1.0, 1.0, 0.8, 1.0],[1.0, 1.0, 1.0, 1.0],[0.0, 0.5, 1.0, 1.0],[1.0, 0.9, 0.6, 1.0],[1.0, 0.9, 0.6, 1.0],[0.9, 0.9, 1.0, 1.0],[1.0, 0.5, 0.0, 1.0]],
    [[1.0, 0.5, 0.5, 1.0],[0.7, 0.7, 1.0, 1.0],[0.6, 0.6, 1.0, 1.0],[1.0, 0.5, 0.2, 1.0],[0.3, 0.3, 1.0, 1.0],[1.0, 0.4, 0.0, 1.0],[0.1, 0.2, 1.0, 1.0],[0.2, 0.2, 1.0, 1.0],[0.15, 0.25, 1.0, 1.0],[0.1, 0.2, 1.0, 1.0],[0.2, 0.3, 1.0, 1.0],[0.0, 0.5, 1.0, 1.0],[1.0, 1.0, 0.98, 1.0],[1.0, 1.0, 0.9, 1.0],[1.0, 0.8, 0.4, 1.0],[0.7, 0.7, 1.0, 1.0],[0.7, 0.7, 1.0, 1.0],[1.0, 0.5, 0.0, 1.0],[0.5, 0.5, 1.0, 1.0],[0.7, 0.7, 1.0, 1.0],[1.0, 0.2, 0.2, 1.0],[0.6, 0.8, 1.0, 1.0],[0.5, 0.7, 1.0, 1.0]],
    [[0.8, 0.8, 1.0, 1.0]],
    [[1.0, 0.9, 0.7, 1.0]],
    [[1.0, 0.65, 0.13, 1.0]],
    [[1.0, 1.0, 0.5, 1.0]],
    [[1.0, 0.0, 0.0, 1.0]]
  ],
  asterismIndices: [
    [[0,1,2,3,4,5,6,3]],
    [[7,8,9,10],[8,11,12,13,14,15,16,17,18,12],[12,14,21],[19,20,21,22,23,24]]
  ]
} as const;

// ‚úÖ STAR CONFIGURATION - —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É
const STAR_CONFIG = {
  starScale: 8.8,         // –†–∞–∑–º–µ—Ä –∑–≤–µ–∑–¥
  radius: 4990,           // –†–∞–¥–∏—É—Å –∑–≤–µ–∑–¥–Ω–æ–π —Å—Ñ–µ—Ä—ã
  ShowAsterisms: true,    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–∑–≤–µ–∑–¥–∏—è
  asterismColor: new Color3(0, 0, 0.6),  // –¶–≤–µ—Ç –ª–∏–Ω–∏–π —Å–æ–∑–≤–µ–∑–¥–∏–π
  twinkleStars: false,    // –ú–µ—Ä—Ü–∞–Ω–∏–µ –∑–≤–µ–∑–¥
  starNoise: false,       // –®—É–º –∑–≤–µ–∑–¥
  showMilkyWay: false     // –ü–æ–∫–∞–∑–∞—Ç—å –ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å
} as const;

// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö 2: QUANTUM TIME CONSTANTS –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Å—Ü–µ–Ω—ã (—Å—Ç—Ä–æ–∫–∏ 107-144)
const QUANTUM_TIME_CONFIG = {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ—á–Ω–æ –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞)
  constNT: 1344643200000,                    // –ë–∞–∑–æ–≤–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞
  constD: 86459178.082191780821918,          // –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  constDExtra: 43229589.41095890410959,      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ (2 —Ä–∞–∑–∞ –≤ –≥–æ–¥—É)
  constY: 31557600000,                       // –ì–æ–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  maxTime: 4090089600000,                    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
  specialDays: { year: 11, day: 121 }        // –û—Å–æ–±—ã–µ –¥–Ω–∏: 11-–π –≥–æ–¥, 121-–π –¥–µ–Ω—å
} as const;

// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö 3: –†–£–°–°–ö–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç—Ä–æ–∫–∏ 1294-1296)
const RUSSIAN_DATE_NAMES = {
  months: ["—è–Ω–≤–∞—Ä—è","—Ñ–µ–≤—Ä–∞–ª—è","–º–∞—Ä—Ç–∞","–∞–ø—Ä–µ–ª—è","–º–∞—è","–∏—é–Ω—è","–∏—é–ª—è","–∞–≤–≥—É—Å—Ç–∞","—Å–µ–Ω—Ç—è–±—Ä—è","–æ–∫—Ç—è–±—Ä—è","–Ω–æ—è–±—Ä—è","–¥–µ–∫–∞–±—Ä—è"],
  days: ["–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ","–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞"],
  daysNum: ["–ø–µ—Ä–≤—ã–π","–≤—Ç–æ—Ä–æ–π","—Ç—Ä–µ—Ç–∏–π","—á–µ—Ç–≤–µ—Ä—Ç—ã–π","–ø—è—Ç—ã–π","—à–µ—Å—Ç–æ–π","—Å–µ–¥—å–º–æ–π","–≤–æ—Å—å–º–æ–π","–¥–µ–≤—è—Ç—ã–π","–¥–µ—Å—è—Ç—ã–π","–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—ã–π","–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—ã–π","—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—ã–π","—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—ã–π","–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π","—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π","—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—ã–π","–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—ã–π","–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—ã–π","–¥–≤–∞–¥—Ü–∞—Ç—ã–π"]
} as const;

// ‚úÖ QUANTUM TIME - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Å—Ü–µ–Ω—ã)
interface QuantumTimeEntry {
  readonly u: number; // Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  readonly d: number; // –î–µ–Ω—å –≤ –∫–≤–∞–Ω—Ç–æ–≤–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
  readonly y: number; // –ì–æ–¥ –≤ –∫–≤–∞–Ω—Ç–æ–≤–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
}

// ‚úÖ –í–†–ï–ú–Ø –ò –î–ê–¢–ê - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
interface TimeDisplayData {
  readonly quantumTime: string;        // –§–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥ (–∫–≤–∞–Ω—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è)
  readonly currentTime: string;        // –§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú:–°–°, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–¥ –º–µ—Å—è—Ü –≥–≥–≥–≥ –≥.
  readonly earthDirection: boolean;    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –ó–µ–º–ª–∏ (–∫ –∞—Ñ–µ–ª–∏—é/–ø–µ—Ä–∏–≥–µ–ª–∏—é)
  readonly moonDirection: boolean;     // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –õ—É–Ω—ã (–∫ –∞–ø–æ–≥–µ—é/–ø–µ—Ä–∏–≥–µ—é)
  readonly moonPhase: number;          // –§–∞–∑–∞ –õ—É–Ω—ã (0-7)
  readonly moonAge: number;            // –í–æ–∑—Ä–∞—Å—Ç –õ—É–Ω—ã –≤ –¥–Ω—è—Ö
  readonly moonDays: number;           // –î–Ω–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∞—Ñ–µ–ª–∏—è/–ø–µ—Ä–∏–≥–µ–ª–∏—è
}

// ‚úÖ CORRECT - Enhanced scene state interface for React refs
interface SceneState {
  engine: Engine | null;
  scene: Scene | null;
  camera: ArcRotateCamera | null;
  celestialMeshes: Map<string, Mesh>;
  starMesh: Mesh | null;              // ‚úÖ –ó–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ
  lastSecond?: number;                // ‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  isReady: boolean;
}

// ‚úÖ FPS Counter interface for useRef
interface FpsCounter {
  frames: number;
  lastTime: number;
}

// ‚úÖ Performance timer for scene initialization tracking
class PerformanceTimer {
  private operationName: string;
  private startTime: number;

  constructor(operationName: string) {
    this.operationName = operationName;
    this.startTime = performance.now();
    console.log(`üöÄ Frontend: Starting ${operationName}`);
  }

  public mark(checkpoint: string): void {
    const currentTime = performance.now();
    const duration = currentTime - this.startTime;
    console.log(`üìä Frontend: ${this.operationName} - ${checkpoint} at ${duration.toFixed(3)}ms`);
  }
}

const BabylonScene: React.FC<BabylonSceneProps> = ({ canvas, wasmModule, isInitialized, onFpsUpdate, onTimeUpdate }) => {
  // ‚úÖ CORRECT - React state for component lifecycle
  const [loaded, setLoaded] = useState(false);

  // ‚úÖ CRITICAL - useRef for persistent scene state (TypeScript 5.9.2+ pattern)
  const sceneStateRef = useRef<SceneState>({
    engine: null,
    scene: null,
    camera: null,
    celestialMeshes: new Map(),
    starMesh: null,
    isReady: false
  });

  // ‚úÖ QUANTUM TIME - –º–∞—Å—Å–∏–≤ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∏ 1272-1291)
  const quantumTimeArrayRef = useRef<QuantumTimeEntry[]>([]);

  // ‚úÖ –£–ë–ò–†–ê–ï–ú React state - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ—Ñ—ã!
  // –ù–ï –°–û–ó–î–ê–ï–ú state –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ä–µ—Ä–µ–Ω–¥–µ—Ä!

  // ‚úÖ CRITICAL - useRef for FPS tracking (prevents reset on re-render)
  const fpsCounterRef = useRef<FpsCounter>({
    frames: 0,
    lastTime: performance.now()
  });

  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö 4: QUANTUM TIME FUNCTIONS (—Å—Ç—Ä–æ–∫–∏ 82-98, 107-144 –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞)
  
  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ–Ω—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –ø–æ–ª—é u
   * –¢–æ—á–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Å—Ü–µ–Ω—ã (—Å—Ç—Ä–æ–∫–∏ 82-98)
   */
  const findClosestSmaller = useCallback((arr: QuantumTimeEntry[], targetU: number): QuantumTimeEntry | null => {
    let left = 0;
    let right = arr.length - 1;
    let closestSmaller: QuantumTimeEntry | null = null;
    
    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      if (arr[mid]!.u <= targetU) {
        closestSmaller = arr[mid]!;
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
    return closestSmaller;
  }, []);

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ NT
   * –¢–æ—á–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Å—Ü–µ–Ω—ã (—Å—Ç—Ä–æ–∫–∏ 1272-1291)
   */
  const initializeQuantumTimeArray = useCallback((): void => {
    if (quantumTimeArrayRef.current.length >= 30000) {
      return; // –ú–∞—Å—Å–∏–≤ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    }

    console.log('üåå Initializing Quantum Time Array...');
    const NT: QuantumTimeEntry[] = [];
    const udy = { u: QUANTUM_TIME_CONFIG.constNT, d: 0, y: 0 };

    while (udy.u < QUANTUM_TIME_CONFIG.maxTime) {
      NT.push({ ...udy });
      
      if (udy.y === QUANTUM_TIME_CONFIG.specialDays.year && udy.d === QUANTUM_TIME_CONFIG.specialDays.day) {
        // –û—Å–æ–±—ã–µ –¥–Ω–∏: –¥–æ–±–∞–≤–ª—è–µ–º 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω—è
        udy.u += QUANTUM_TIME_CONFIG.constDExtra;
        udy.d += 1;
        NT.push({ ...udy });
        udy.u += QUANTUM_TIME_CONFIG.constDExtra;
        udy.d += 1;
        NT.push({ ...udy });
      } else {
        // –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å
        udy.u += QUANTUM_TIME_CONFIG.constD;
        udy.d += 1;
      }
      
      if (udy.d === 365) {
        udy.d = 0;
        udy.y += 1;
      }
    }

    quantumTimeArrayRef.current = NT;
    console.log(`‚úÖ Quantum Time Array initialized with ${NT.length} entries`);
  }, []);

  /**
   * –†–∞—Å—á–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∞—Ç—ã
   * –¢–æ—á–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Å—Ü–µ–Ω—ã (—Å—Ç—Ä–æ–∫–∏ 100-144)
   */
  const calculateQuantumTime = useCallback((date: Date): string => {
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è UTC (–∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ)
    const adjustedDate = new Date(date);
    adjustedDate.setHours(24 - (adjustedDate.getTimezoneOffset() / 60 + 4));
    adjustedDate.setMinutes(0);
    adjustedDate.setSeconds(0);
    adjustedDate.setMilliseconds(0);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (quantumTimeArrayRef.current.length === 0) {
      initializeQuantumTimeArray();
    }

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è
    const res = findClosestSmaller(quantumTimeArrayRef.current, adjustedDate.getTime());
    if (!res) {
      return '00.00.00';
    }

    const yNTr = Math.trunc(res.y);
    const dNTrr = Math.trunc(res.d);
    const dpNTr = Math.trunc(dNTrr / 10);
    const dNTr = dNTrr - (dpNTr * 10);
    
    const yNT = `00${yNTr.toString()}`;
    const dNT = `00${dNTr.toString()}`;
    const dpNT = `00${dpNTr.toString()}`;
    
    return `${dNT.substring(dNT.length - 2)}.${dpNT.substring(dpNT.length - 2)}.${yNT.substring(yNT.length - 2)}`;
  }, [findClosestSmaller, initializeQuantumTimeArray]);

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
   * –¢–æ—á–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Å—Ü–µ–Ω—ã (—Å—Ç—Ä–æ–∫–∏ 1337-1345)
   */
  const formatCurrentTime = useCallback((date: Date): string => {
    const tDn = RUSSIAN_DATE_NAMES.days[date.getDay()]!;
    const tD = date.getDate().toString();
    const tM = RUSSIAN_DATE_NAMES.months[date.getMonth()]!;
    const tH = `00${date.getHours().toString()}`;
    const tMm = `00${date.getMinutes().toString()}`;
    const tS = `00${date.getSeconds().toString()}`;
    
    return `${tH.substring(tH.length - 2)}:${tMm.substring(tMm.length - 2)}:${tS.substring(tS.length - 2)}, ${tDn}, ${tD} ${tM} ${date.getFullYear().toString()} –≥.`;
  }, []);

  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö 5: CREATE SKY FUNCTION (—Å—Ç—Ä–æ–∫–∏ 350-425 –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Å—Ü–µ–Ω—ã)
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞ —Å —Å–æ–∑–≤–µ–∑–¥–∏—è–º–∏
   * –¢–æ—á–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Å—Ü–µ–Ω—ã (—Å—Ç—Ä–æ–∫–∏ 350-425)
   */
  const createSky = useCallback((scene: Scene): Mesh => {
    console.log('‚≠ê Creating stellar sky with constellations...');
    
    const starMesh = new Mesh('starMesh', scene);
    starMesh.alphaIndex = 20;
    
    const starsCoordinates: number[] = [];
    const starsIndices: number[] = [];
    const starsColor: number[] = [];
    const starsUV: number[] = [];
    let vertexIndex = 0;

    // –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥—ã –ø–æ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
    for (let astLimitLoop = STAR_DATA.rightAscension.length, i = 0; i < astLimitLoop; i++) {
      for (let starLimitLoop = STAR_DATA.rightAscension[i]!.length, j = 0; j < starLimitLoop; j++) {
        // –ü—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Å–∞—Ö -> –≥—Ä–∞–¥—É—Å–∞—Ö -> —Ä–∞–¥–∏–∞–Ω–∞—Ö
        const ra = (STAR_DATA.rightAscension[i]![j]![0]! + STAR_DATA.rightAscension[i]![j]![1]! / 60 + STAR_DATA.rightAscension[i]![j]![2]! / 3600) * 15;
        
        // –°–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö -> —Ä–∞–¥–∏–∞–Ω–∞—Ö
        const decDegrees = STAR_DATA.declination[i]![j]![0]!;
        const decMinutes = STAR_DATA.declination[i]![j]![1]!;
        const decSeconds = STAR_DATA.declination[i]![j]![2]!;
        const dec = (decDegrees < 0 || Object.is(decDegrees, -0))
          ? -(Math.abs(decDegrees) + decMinutes / 60 + decSeconds / 3600)
          : decDegrees + decMinutes / 60 + decSeconds / 3600;

        const rightAscension = Tools.ToRadians(ra);
        const declination = Tools.ToRadians(dec);

        // –†–∞–∑–º–µ—Ä –∑–≤–µ–∑–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∏–º–æ–π –≤–µ–ª–∏—á–∏–Ω—ã
        const scaleFactor = (10.8 - (STAR_DATA.apparentMagnitude[i]![j]! * 1.5)) * STAR_CONFIG.starScale;

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –∑–≤–µ–∑–¥—ã (3 –≤–µ—Ä—à–∏–Ω—ã)
        let vertex1 = new Vector3(0 * scaleFactor, 0.7 * scaleFactor, STAR_CONFIG.radius);
        let vertex2 = new Vector3(-0.5 * scaleFactor, -0.3 * scaleFactor, STAR_CONFIG.radius);
        let vertex3 = new Vector3(0.5 * scaleFactor, -0.3 * scaleFactor, STAR_CONFIG.radius);

        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∑–≤–µ–∑–¥—É –ø–æ –Ω–µ–±–µ—Å–Ω–æ–π —Å—Ñ–µ—Ä–µ
        const transformMatrix = Matrix.RotationYawPitchRoll(-rightAscension, -declination, 0);
        vertex1 = Vector3.TransformCoordinates(vertex1, transformMatrix);
        vertex2 = Vector3.TransformCoordinates(vertex2, transformMatrix);
        vertex3 = Vector3.TransformCoordinates(vertex3, transformMatrix);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—à–∏–Ω
        starsCoordinates.push(vertex1.x, vertex1.y, vertex1.z, vertex2.x, vertex2.y, vertex2.z, vertex3.x, vertex3.y, vertex3.z);

        // –¶–≤–µ—Ç –∑–≤–µ–∑–¥—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        const starColor = STAR_DATA.color[i]![j]!;
        starsColor.push(
          starColor[0]!, starColor[1]!, starColor[2]!, starColor[3]!,
          starColor[0]!, starColor[1]!, starColor[2]!, starColor[3]!,
          starColor[0]!, starColor[1]!, starColor[2]!, starColor[3]!
        );

        // UV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        starsUV.push(0.5, 1, 0, 0, 1, 0);

        // –ò–Ω–¥–µ–∫—Å—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        starsIndices.push(vertexIndex, vertexIndex + 1, vertexIndex + 2);
        vertexIndex += 3;
      }
    }

    // –°–æ–∑–¥–∞–µ–º mesh —Å–æ –∑–≤–µ–∑–¥–∞–º–∏
    const vertexData = new VertexData();
    vertexData.positions = starsCoordinates;
    vertexData.indices = starsIndices;
    vertexData.colors = starsColor;
    vertexData.uvs = starsUV;
    vertexData.applyToMesh(starMesh);

    // –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∑–≤–µ–∑–¥
    const starMaterial = new StandardMaterial('starMaterial', scene);
    starMaterial.disableLighting = true;
    starMaterial.emissiveColor = new Color3(1, 1, 1);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –∑–≤–µ–∑–¥—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    try {
      const starTexture = new Texture('textures/star.png', scene);
      starMaterial.opacityTexture = starTexture;
    } catch (error) {
      console.warn('Star texture not found, using solid stars');
    }
    
    starMesh.material = starMaterial;

    // ‚úÖ –°–û–ó–í–ï–ó–î–ò–Ø - –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É –∑–≤–µ–∑–¥–∞–º–∏
    if (STAR_CONFIG.ShowAsterisms) {
      console.log('üåå Creating constellation lines...');
      
      const createConstellationLine = (start: Vector3, end: Vector3): void => {
        const points = [start, end];
        const lines = MeshBuilder.CreateLines("constellationLine", { points }, scene);
        lines.color = STAR_CONFIG.asterismColor;
      };

      // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏–∏ —Å–æ–∑–≤–µ–∑–¥–∏–π –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
      for (let asr = 0; asr < STAR_DATA.asterismIndices.length; asr++) {
        for (let i = 0; i < STAR_DATA.asterismIndices[asr]!.length; i++) {
          const constellation = STAR_DATA.asterismIndices[asr]![i]!;
          for (let j = 0; j < constellation.length - 1; j++) {
            const startIdx = constellation[j]!;
            const endIdx = constellation[j + 1]!;
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–≤–µ–∑–¥ –¥–ª—è –ª–∏–Ω–∏–∏ (–∫–∞–∂–¥–∞—è –∑–≤–µ–∑–¥–∞ –∏–º–µ–µ—Ç 3 –≤–µ—Ä—à–∏–Ω—ã * 3 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã = 9 –∑–Ω–∞—á–µ–Ω–∏–π)
            const startCoordIdx = startIdx * 9; // –ü–µ—Ä–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞ –∑–≤–µ–∑–¥—ã
            const endCoordIdx = endIdx * 9;
            
            if (startCoordIdx < starsCoordinates.length && endCoordIdx < starsCoordinates.length) {
              const start = new Vector3(
                starsCoordinates[startCoordIdx]!,
                starsCoordinates[startCoordIdx + 1]!,
                starsCoordinates[startCoordIdx + 2]!
              );
              const end = new Vector3(
                starsCoordinates[endCoordIdx]!,
                starsCoordinates[endCoordIdx + 1]!,
                starsCoordinates[endCoordIdx + 2]!
              );
              createConstellationLine(start, end);
            }
          }
        }
      }
    }

    console.log(`‚úÖ Stellar sky created with ${starsCoordinates.length / 9} stars and constellation lines`);
    return starMesh;
  }, []);

  // ‚úÖ CORRECT - Main scene initialization function (Babylon.js 8.21.0 patterns)
  const initializeBabylonScene = useCallback(async (canvas: HTMLCanvasElement): Promise<void> => {
    if (loaded) {
      console.log('‚è∏Ô∏è Scene already loaded - skipping initialization');
      return;
    }

    const timer = new PerformanceTimer('babylon_scene_initialization');
    
    try {
      console.log('üé¨ Initializing Babylon.js Scene...');

      // ‚úÖ CORRECT - Engine initialization with optimized settings for 60fps
      const engine = new Engine(canvas, true, {
        preserveDrawingBuffer: false,
        stencil: false,
        antialias: true,
        alpha: true,
        powerPreference: "high-performance",
        failIfMajorPerformanceCaveat: false, // Allow fallback for compatibility
      });

      timer.mark('engine_created');

      // ‚úÖ CORRECT - Scene creation with optimized settings
      const scene = new Scene(engine);
      scene.clearColor.r = 0.02;
      scene.clearColor.g = 0.02;
      scene.clearColor.b = 0.05;
      scene.clearColor.a = 1.0; // Dark space background

      timer.mark('scene_created');

      // ‚úÖ Create scene content (celestial bodies, lighting, camera)
      createSceneContent(scene, engine, timer);
      
      // ‚úÖ Mark scene as ready
      sceneStateRef.current.isReady = true;
      setLoaded(true);

      timer.mark('scene_ready');

    } catch (error) {
      console.error('‚ùå Babylon.js Scene Initialization Failed:', error);
    }
  }, [loaded]);

  // ‚úÖ CORRECT - Create scene content function (separated for clarity)
  const createSceneContent = useCallback((scene: Scene, engine: Engine, timer: PerformanceTimer): void => {
    console.log('üé≠ Creating scene content...');

    // ‚úÖ CAMERA ATTACHED TO EARTH - as requested!
    const earthRadius = CELESTIAL_BODIES.earth!.radius;
    const earthPosition = new Vector3(15, 0, 0); // Initial Earth position - will be updated by WASM

    const camera = new ArcRotateCamera(
      "camera",
      -Math.PI / 2,      // Alpha (horizontal rotation)
      Math.PI / 2.5,     // Beta (vertical rotation)
      earthRadius * 4,   // Distance = 2 diameters from Earth center (4 * radius)
      earthPosition,     // Target Earth position (will be updated)
      scene
    );

    // ‚úÖ ZOOM LIMITS - as requested!
    camera.lowerRadiusLimit = earthRadius * 1.1;  // Can zoom almost to surface (radius + 10%)
    camera.upperRadiusLimit = earthRadius * 50;   // Max zoom out (50 diameters)

    // Enable smooth camera controls - ATTACHED TO EARTH
    camera.attachControl(canvas, true);

    // ‚úÖ OPTIMAL CONTROLS following Babylon.js 8.21.0 best practices
    camera.wheelPrecision = 3.0;       // Standard wheel zoom precision
    camera.pinchPrecision = 12.0;      // Standard touch zoom precision
    camera.panningSensibility = 1000;  // Standard panning sensitivity
    camera.angularSensibilityX = 1000; // Standard horizontal rotation
    camera.angularSensibilityY = 1000; // Standard vertical rotation

    // ‚úÖ Enable inertia for smooth camera movement
    camera.inertia = 0.9;              // Smooth camera inertia
    camera.panningInertia = 0.9;       // Smooth panning inertia

    // ‚úÖ ONLY SUN LIGHTING - as requested!

    // ‚úÖ STRONGER AMBIENT LIGHT for object visibility
    const ambientLight = new HemisphericLight(
      "ambientLight",
      new Vector3(0, 1, 0),
      scene
    );
    ambientLight.intensity = 0.8; // Much brighter for visibility
    ambientLight.diffuse = new Color3(0.4, 0.4, 0.6); // Slightly blue space tint

    // ‚úÖ SUN AS MAIN LIGHT SOURCE AT CENTER (0,0,0)
    const sunLight = new PointLight(
      "sunLight",
      Vector3.Zero(), // At Sun position (0,0,0)
      scene
    );
    sunLight.intensity = 8.0; // Much stronger for better visibility
    sunLight.diffuse = new Color3(1.0, 0.9, 0.7); // Warm sunlight
    sunLight.specular = new Color3(1.0, 0.9, 0.7);
    sunLight.range = 500; // Larger range for distant planets

    timer.mark('lighting_configured');

    // ‚úÖ Create Celestial Bodies with optimized meshes
    const sceneObjects = new Map<string, Mesh>();

    // ‚úÖ SUN AT CENTER (0,0,0) - as requested!
    const sunConfig = CELESTIAL_BODIES.sun!;
    const sunMesh = MeshBuilder.CreateSphere("sun", {
      diameter: sunConfig.radius * 2,
      segments: 32
    }, scene);
    sunMesh.position = Vector3.Zero(); // ‚úÖ SUN AT CENTER OF SCENE

    // ‚úÖ STANDARD: Let Babylon.js handle mesh optimizations automatically
    // Removed advanced optimizations that may not be needed for simple scene

    // ‚úÖ Enhanced Sun material with emission
    const sunMaterial = new StandardMaterial("sunMaterial", scene);
    sunMaterial.diffuseColor = sunConfig.color;
    sunMaterial.emissiveColor = sunConfig.color;
    sunMaterial.specularColor = new Color3(0, 0, 0); // No specular highlights
    sunMaterial.disableLighting = true; // Sun is self-illuminated
    sunMaterial.freeze(); // ‚úÖ Material optimization
    sunMesh.material = sunMaterial;

    sceneObjects.set('sun', sunMesh);

    // ‚úÖ Enhanced Earth with 8.21.0 optimizations
    const earthConfig = CELESTIAL_BODIES.earth!;
    const earthMesh = MeshBuilder.CreateSphere("earth", {
      diameter: earthConfig.radius * 2,
      segments: 24
    }, scene);

    // ‚úÖ EARTH ORBITS AROUND SUN - positioned by WASM data
    earthMesh.position = new Vector3(15, 0, 0); // Initial position - will be updated by WASM

    const earthMaterial = new StandardMaterial("earthMaterial", scene);
    earthMaterial.diffuseColor = earthConfig.color;
    earthMaterial.specularColor = new Color3(0.1, 0.1, 0.2);
    earthMaterial.freeze(); // ‚úÖ Static material optimization
    earthMesh.material = earthMaterial;

    sceneObjects.set('earth', earthMesh);

    // ‚úÖ Enhanced Moon with 8.21.0 optimizations
    const moonConfig = CELESTIAL_BODIES.moon!;
    const moonMesh = MeshBuilder.CreateSphere("moon", {
      diameter: moonConfig.radius * 2,
      segments: 16
    }, scene);

    // ‚úÖ MOON ORBITS AROUND EARTH - positioned by WASM data
    moonMesh.position = new Vector3(16, 0, 0); // Initial position - will be updated by WASM

    const moonMaterial = new StandardMaterial("moonMaterial", scene);
    moonMaterial.diffuseColor = moonConfig.color;
    moonMaterial.specularColor = new Color3(0.05, 0.05, 0.05);
    moonMaterial.freeze(); // ‚úÖ Material optimization
    moonMesh.material = moonMaterial;

    sceneObjects.set('moon', moonMesh);

    timer.mark('celestial_bodies_created');

    // ‚úÖ Enhanced Starfield with 8.21.0 optimizations
    const starfield = MeshBuilder.CreateSphere("starfield", {
      diameter: 200,
      segments: 16
    }, scene);

    // ‚úÖ STANDARD: Keep starfield static (it never moves)
    starfield.freezeWorldMatrix(); // Good optimization for static background

    const starfieldMaterial = new StandardMaterial("starfieldMaterial", scene);
    starfieldMaterial.diffuseColor = new Color3(0.1, 0.1, 0.1); // Neutral stars
    starfieldMaterial.emissiveColor = new Color3(0.3, 0.3, 0.3); // Brighter stars
    starfieldMaterial.backFaceCulling = false; // Render inside of sphere
    starfieldMaterial.freeze(); // ‚úÖ Freeze material for performance
    starfield.material = starfieldMaterial;

    timer.mark('starfield_created');

    // ‚úÖ STELLAR SKY - —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –∑–≤–µ–∑–¥—ã –∏ —Å–æ–∑–≤–µ–∑–¥–∏—è
    const starMesh = createSky(scene);
    timer.mark('stellar_sky_created');

    // ‚úÖ Update scene state ref
    sceneStateRef.current = {
      engine,
      scene,
      camera,
      celestialMeshes: sceneObjects,
      starMesh,
      isReady: true
    };

    // ‚úÖ CRITICAL - 60FPS RENDER LOOP with FPS tracking (Babylon.js 8.21.0 pattern)
    console.log('üîÅ Starting render loop...');
    engine.runRenderLoop(() => {
      const currentTime = performance.now();

      // ‚úÖ CORRECT FPS tracking with useRef (persistent across renders)
      fpsCounterRef.current.frames++;
      if (currentTime - fpsCounterRef.current.lastTime >= 1000) {
        const fps = Math.round(fpsCounterRef.current.frames * 1000 / (currentTime - fpsCounterRef.current.lastTime));
        fpsCounterRef.current.frames = 0;
        fpsCounterRef.current.lastTime = currentTime;

        // ‚úÖ Report FPS to parent component
        if (onFpsUpdate) {
          onFpsUpdate(fps);
        }
      }

      // ‚úÖ Update celestial positions from WASM every frame (60fps smooth movement)
      if (wasmModule && sceneStateRef.current.isReady) {
        try {
          updateCelestialPositionsRealtime(wasmModule, currentTime);
        } catch (error) {
          // Log error but don't break render loop
          console.error('‚ùå WASM update failed:', error);
          // Fall back to basic positioning without WASM data
        }
      }

      // ‚úÖ TIME UPDATE - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É (–∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ —Å—Ç—Ä–æ–∫–∏ 1331-1346)
      const now = new Date();
      const currentSecond = now.getSeconds();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å–µ–∫—É–Ω–¥–∞ (–æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)
      if (!sceneStateRef.current.lastSecond || sceneStateRef.current.lastSecond !== currentSecond) {
        sceneStateRef.current.lastSecond = currentSecond;
        
        // –£–ë–ò–†–ê–ï–ú –í–ï–°–¨ React state! –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º DOM –Ω–∞–ø—Ä—è–º—É—é
        // –ë–ï–ó setTimeDisplay() –∏ –ë–ï–ó onTimeUpdate()
        // –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç React —Ä–µ—Ä–µ–Ω–¥–µ—Ä!
      }

      // ‚úÖ Render scene (automatically clears with dark space background)
      scene.render();
    });

    // ‚úÖ Handle resize with proper engine resize
    const handleResize = () => {
      engine.resize();
    };
    window.addEventListener('resize', handleResize);

    timer.mark('initialization_complete');
    console.log('‚úÖ Babylon.js Scene Initialized Successfully at 60fps');
  }, [wasmModule, onFpsUpdate]);

  // ‚úÖ CORRECT - Pre-allocated Vector3 objects for zero-allocation updates
  const sunPositionVector = useMemo(() => Vector3.Zero(), []);
  const moonPositionVector = useMemo(() => Vector3.Zero(), []);
  const earthPositionVector = useMemo(() => Vector3.Zero(), []);

  // ‚úÖ REAL-TIME 60FPS: Update celestial positions directly from WASM every frame
  const updateCelestialPositionsRealtime = useCallback((wasmModule: WASMModule, currentTime: number): void => {
    const sceneState = sceneStateRef.current;
    if (!sceneState.isReady || !sceneState.celestialMeshes) return;

    try {
      // ‚úÖ Calculate current Julian Day
      const julianDay = JULIAN_DAY_UNIX_EPOCH + currentTime / 86400000.0;

      // ‚úÖ CRITICAL: Exactly ONE compute_all() call per frame (60fps)
      const positionsPtr = wasmModule.compute_all(julianDay);

      // Add debug logging for first few frames
      if (!((window as any).__debugCallCount)) (window as any).__debugCallCount = 0;
      if ((window as any).__debugCallCount++ < 5) {
        console.log(`üåå WASM Frame ${(window as any).__debugCallCount}: JD=${julianDay.toFixed(6)}, ptr=${positionsPtr}`);
      }

      if (positionsPtr === 0) {
        console.warn('‚ö†Ô∏è WASM calculation returned null pointer');
        return;
      }

      // ‚úÖ Zero-copy access via Float64Array view to WASM memory
      const positionsResult = createPositionsView(wasmModule, positionsPtr);
      if (!positionsResult.success) {
        console.error('‚ùå Failed to create positions view:', positionsResult.error.message);
        return;
      }

      // ‚úÖ Extract all celestial positions using the dedicated function
      const astronomicalData = extractCelestialPositions(positionsResult.data, currentTime);

      // ‚úÖ HELIOCENTRIC/GEOCENTRIC VISUALIZATION: Correct astronomical model
      const scaleAU = 20.0; // Larger scale for better visibility

      // ‚úÖ SUN ALWAYS AT CENTER (0,0,0) - HELIOCENTRIC MODEL
      const sunMesh = sceneState.celestialMeshes.get('sun');
      if (sunMesh) {
        sunPositionVector.set(
          astronomicalData.sun.x * scaleAU, // Always (0,0,0) from WASM
          astronomicalData.sun.y * scaleAU,
          astronomicalData.sun.z * scaleAU
        );
        sunMesh.position.copyFrom(sunPositionVector);
      }

      // ‚úÖ EARTH ORBITS AROUND SUN - use real heliocentric coordinates
      const earthMesh = sceneState.celestialMeshes.get('earth');
      if (earthMesh) {
        // Use Earth's real heliocentric position from WASM
        earthPositionVector.set(
          astronomicalData.earth.x * scaleAU,
          astronomicalData.earth.y * scaleAU,
          astronomicalData.earth.z * scaleAU
        );
        earthMesh.position.copyFrom(earthPositionVector);

        // ‚úÖ CAMERA ALWAYS FOLLOWS EARTH - as requested!
        if (sceneState.camera) {
          sceneState.camera.setTarget(earthPositionVector);
        }
      }

      // ‚úÖ MOON ORBITS AROUND EARTH - already positioned correctly in WASM
      const moonMesh = sceneState.celestialMeshes.get('moon');
      if (moonMesh) {
        // Moon position already includes Earth offset from WASM
        moonPositionVector.set(
          astronomicalData.moon.x * scaleAU,
          astronomicalData.moon.y * scaleAU,
          astronomicalData.moon.z * scaleAU
        );
        moonMesh.position.copyFrom(moonPositionVector);
      }

    } catch (error) {
      console.error('‚ùå Real-time Position Update Failed:', error);
    }
  }, [sunPositionVector, moonPositionVector, earthPositionVector]);

  // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô useEffect –∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ - –¢–û–õ–¨–ö–û canvas –∫–∞–∫ trigger!
  useEffect(() => {
    if (!canvas) { 
      console.log('‚è∏Ô∏è No canvas available');
      return; 
    }
    
    // ‚úÖ –ü–†–û–í–ï–†–ö–ê —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ (—Å—Ç—Ä–æ–∫–∞ 1263)
    if (!loaded) {
      console.log('üéØ Starting scene initialization ONCE...');
      setLoaded(true);
      
      // ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–î–ò–ù –†–ê–ó –∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ
      initializeBabylonScene(canvas);
    }

    // ‚úÖ Cleanup —Ç–æ–ª—å–∫–æ –ø—Ä–∏ unmount
    return () => {
      console.log('üßπ Cleaning up Babylon.js scene...');
      const sceneState = sceneStateRef.current;
      
      if (sceneState.engine) {
        sceneState.engine.stopRenderLoop();
        if (sceneState.scene) {
          sceneState.scene.dispose();
        }
        sceneState.engine.dispose();
        
        sceneStateRef.current = {
          engine: null,
          scene: null,
          camera: null,
          celestialMeshes: new Map(),
          starMesh: null,
          isReady: false
        };
      }
      
      setLoaded(false);
    };
  }, [canvas]); // ‚úÖ –¢–û–õ–¨–ö–û canvas –∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ!

  // ‚úÖ QUANTUM TIME INITIALIZATION - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    console.log('üåå Initializing quantum time system...');
    initializeQuantumTimeArray();
    
    // –ù–ï –°–û–ó–î–ê–ï–ú React state! –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
    // –ë–ï–ó setTimeDisplay() –∏ –ë–ï–ó onTimeUpdate() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
  }, [initializeQuantumTimeArray]);

  // ‚úÖ CORRECT - This component manages Babylon.js scene but doesn't render JSX
  // Time display data is exposed through timeDisplay state for parent components
  return null;
};

export default BabylonScene;
export type { TimeDisplayData };
